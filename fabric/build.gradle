plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

def accessWidenerFile = project(":common").minecraft.mcPatcher.accessWidener
minecraft {
    fabric {
        if (accessWidenerFile != null) {
            accessWidener = accessWidenerFile
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    fabric "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Fabric Integrations (1.14+)
    if (protocol >= 498) {
        // Required for loading translation data
        modImplementation(fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version))
        include(fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version))

        // Mod Menu API Implementation
        modImplementation "${rootProject.modmenu_group}:modmenu:${rootProject.modmenu_version}"
    }

    common project(path: ':common'), { transitive false }
    common(project(path: ":common", configuration: "shade"))
    common project(path: ":common", configuration: "runtime")
    shadowCommon project(path: ":common", configuration: "shadeOnly")
    shadowCommon project(path: ':common'), { transitive false }

    // Additional Integrations
    if (use_replay_mod.toBoolean()) {
        modImplementation(fabricApi.module("fabric-networking-api-v1", rootProject.fabric_api_version))

        modImplementation("com.replaymod:replaymod-${rootProject.mc_version}:${rootProject.replaymod_ver}")
    }
}

processResources {
    inputs.property "version", "${baseVersionLabel}"
    inputs.property "mcversion", "${rootProject.mc_version}"

    filesMatching("fabric.mod.json") {
        expand "version": "${baseVersionLabel}",
                "mcversion": "${rootProject.mc_version}"
    }

    filesMatching("mappings-fabric.srg") {
        filter { line ->
            if (line.startsWith("CL:")) {
                line
            } else {
                null
            }
        }
    }
}

exportMappings {
    def target = (isLegacy || protocol < 498) ? "mcp" : "mojmap"
    export("CLIENT") {
        targetNamespaces = [target]
        sourceNamespace = "intermediary"
        location = "$projectDir/src/main/resources/mappings-fabric.srg"
        type = "SRG"
    }

    export("COMBINED") {
        targetNamespaces = [target]
        sourceNamespace = "intermediary"
        location = "$projectDir/src/main/resources/mappings-fabric.srg"
        type = "SRG"
    }
}
processResources.dependsOn exportMappings

shadowJar {
    mustRunAfter(project(":common").tasks.shadowJar)
    dependsOn(project(":common").tasks.shadowJar)
    from zipTree(project(":common").tasks.shadowJar.archiveFile)
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"

    // Meta Exclusions
    exclude '**/DEPENDENCIES*'
    exclude '**/LICENSE*'
    exclude '**/Log4J*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/versions/**'
    // Package Relocations
    relocate 'com.jagrosh', 'external.com.jagrosh'
    relocate 'org.meteordev', 'external.org.meteordev'
    relocate 'io.github.classgraph', 'external.io.github.classgraph'
    relocate 'nonapi.io.github.classgraph', 'external.nonapi.io.github.classgraph'
    if (protocol < 755) {
        relocate 'org.slf4j', 'external.org.slf4j'
        relocate 'org.apache.logging.slf4j', 'external.org.apache.logging.slf4j'
    }
    // Integration Relocations
    if (!isLegacy) {
        relocate 'me.hypherionmc', 'external.me.hypherionmc'
    }
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "fabric"
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}