plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    // Fabric Integrations (1.14+)
    if (isModern) {
        // Required for loading translation data
        modImplementation(fabricApi.fabricModule("fabric-resource-loader-v0", fabric_api_version))
        include(fabricApi.fabricModule("fabric-resource-loader-v0", fabric_api_version))

        // Mod Menu API Implementation
        modImplementation "${modmenu_group}:modmenu:${modmenu_version}"
    }

    common project(path: ':common'), { transitive false }
    common(project(path: ":common", configuration: "shade"))
    common project(path: ":common", configuration: "runtime")
    shadowCommon project(path: ":common", configuration: "shadeOnly")
    shadowCommon project(path: ':common'), { transitive false }
}

def resourceTargets = [
        "fabric.mod.json"
]
def replaceProperties = [
        version: baseVersionLabel.toString(), mcversion: mcVersionLabel.toString(),
        game_version_range: fabric_game_version_range.toString(),
        loader_version_range: fabric_loader_version_range.toString()
]

processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    filesMatching("mappings-fabric.srg") {
        filter { line ->
            if (line.startsWith("CL:")) {
                line
            } else {
                null
            }
        }
    }
}

exportMappings {
    def target = isMCPJar ? "searge" : (!isModern ? "mcp" : "mojmap")
    export {
        targetNamespaces = [target]
        sourceNamespace = isJarMod ? "official" : "intermediary"
        location = "$projectDir/src/main/resources/mappings-fabric.srg"
        type = "SRG"
    }
}
processResources.dependsOn exportMappings

shadowJar {
    mustRunAfter(project(":common").tasks.shadowJar)
    dependsOn(project(":common").tasks.shadowJar)
    from zipTree(project(":common").tasks.shadowJar.archiveFile)
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"

    // Meta Exclusions
    exclude '**/DEPENDENCIES*'
    exclude '**/LICENSE*'
    exclude '**/Log4J*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/versions/**'

    // JUnixSocket exclusions:
    // libs
    // discord doesn't support bsd or sun
    exclude 'lib/*BSD*/**'
    exclude 'lib/*Sun*/**'
    // we don't use junixsocket on windows
    exclude 'lib/*Window*/**'
    // include only arm on mac
    exclude 'lib/aarch64-Linux*/**'
    // doesn't support these architectures
    exclude 'lib/ppc*/**'
    exclude 'lib/risc*/**'
    exclude 'lib/s390x*/**'
    exclude 'lib/arm*/**'
    // metadata
    // discord doesn't support bsd or sun
    exclude 'META-INF/native-image/com.kohlschutter.junixsocket/junixsocket-native-*BSD*/**'
    exclude 'META-INF/native-image/com.kohlschutter.junixsocket/junixsocket-native-*Sun*/**'
    // we don't use junixsocket on windows
    exclude 'META-INF/native-image/com.kohlschutter.junixsocket/junixsocket-native-*Window*/**'
    // include only arm on mac
    exclude 'META-INF/native-image/com.kohlschutter.junixsocket/junixsocket-native-aarch64-Linux*/**'
    // doesn't support these architectures
    exclude 'META-INF/native-image/com.kohlschutter.junixsocket/junixsocket-native-ppc*/**'
    exclude 'META-INF/native-image/com.kohlschutter.junixsocket/junixsocket-native-risc*/**'
    exclude 'META-INF/native-image/com.kohlschutter.junixsocket/junixsocket-native-s390x*/**'
    exclude 'META-INF/native-image/com.kohlschutter.junixsocket/junixsocket-native-arm*/**'

    // Package Relocations
    relocate 'com.jagrosh', 'external.com.jagrosh'
    relocate 'org.meteordev', 'external.org.meteordev'
    relocate 'io.github.classgraph', 'external.io.github.classgraph'
    relocate 'nonapi.io.github.classgraph', 'external.nonapi.io.github.classgraph'
    if (protocol < 755) {
        relocate 'org.slf4j', 'external.org.slf4j'
        relocate 'org.apache.logging.slf4j', 'external.org.apache.logging.slf4j'
    }
    // Integration Relocations
    if (!isLegacy) {
        relocate 'me.hypherionmc', 'external.me.hypherionmc'
    }
}

remapJar {
    if (isJarMod) {
        prodNamespace "official"
    }
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "fabric"
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}