plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}


import com.google.gson.JsonObject
import org.jetbrains.annotations.NotNull
import xyz.wagyourtail.unimined.api.mappings.MappingNamespace
import xyz.wagyourtail.unimined.minecraft.patch.fabric.FabricLikeMinecraftTransformer

def accessWidenerFile = !isJarMod ? project(":common").minecraft.mcPatcher.accessWidener : null

minecraft {
    if (!isJarMod) {
        fabric {
            if (accessWidenerFile != null) {
                accessWidener = accessWidenerFile
            }
        }
    } else {
        mcPatcher = new FabricLikeMinecraftTransformer(project, project.minecraft, "fabric", "fabric.mod.json", "accessWidener") {
            @Override
            public MappingNamespace getProdNamespace() {
                return MappingNamespace.OFFICIAL
            }

            @Override
            public java.nio.file.Path getDevMappings() {
                return null
            }

            @Override
            protected String getENVIRONMENT() {
                return "Lnet/fabricmc/api/Environment;"
            }

            @Override
            protected String getENV_TYPE() {
                return "Lnet/fabricmc/api/EnvType;"
            }

            @Override
            protected void addIncludeToModJson(@NotNull JsonObject json, @NotNull Dependency dependency, @NotNull String s) {
                var jars = json.get("jars")?.asJsonArray
                if (jars == null) {
                    jars = JsonArray()
                    json.add("jars", jars)
                }
                jars.add(JsonObject().apply {
                    addProperty("file", path)
                })
            }

            @Override
            protected void addMavens() {
                // N/A
            }
        }
        // required when using mcp mappings
        if (protocol <= 2) { // MC a1.1.2_01 and below
            mcPatcher.devNamespace = "searge"
        } else {
            mcPatcher.devFallbackNamespace = "searge"
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    fabric "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Fabric Integrations (1.14+)
    if (protocol >= 498) {
        // Required for loading translation data
        modImplementation(fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version))
        include(fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version))

        // Mod Menu API Implementation
        modImplementation "${rootProject.modmenu_group}:modmenu:${rootProject.modmenu_version}"
    }

    common project(path: ':common'), { transitive false }
    common(project(path: ":common", configuration: "shade"))
    common project(path: ":common", configuration: "runtime")
    shadowCommon project(path: ":common", configuration: "shadeOnly")
    shadowCommon project(path: ':common'), { transitive false }

    // Additional Integrations
    if (use_replay_mod.toBoolean()) {
        modImplementation(fabricApi.module("fabric-networking-api-v1", rootProject.fabric_api_version))
        modImplementation(fabricApi.module("fabric-key-binding-api-v1", rootProject.fabric_api_version))
        // Apply Legacy APIs on select MC Versions
        if (protocol < 755) { // 1.17 and below
            modImplementation(fabricApi.module("fabric-networking-v0", rootProject.fabric_api_version))
            if (protocol < 735) { // 1.16 and below
                modImplementation(fabricApi.module("fabric-keybindings-v0", rootProject.fabric_api_version))
            }
        }
        modImplementation(fabricApi.module("fabric-api-base", rootProject.fabric_api_version))

        modImplementation("com.replaymod:replaymod-${rootProject.mc_version}:${rootProject.replaymod_ver}")
    }
}

// Fix: mcversion constaint does not apply below 1.0
def mcVersionTarget = (isLegacy && protocol < 22) ? "*" : "${mcVersionLabel}"

processResources {
    inputs.property "version", "${baseVersionLabel}"
    inputs.property "mcversion", "${mcVersionTarget}"

    filesMatching("fabric.mod.json") {
        expand "version": "${baseVersionLabel}",
                "mcversion": "${mcVersionTarget}"
    }

    filesMatching("mappings-fabric.srg") {
        filter { line ->
            if (line.startsWith("CL:")) {
                line
            } else {
                null
            }
        }
    }
}

exportMappings {
    def target = isJarMod ? "searge" : ((isLegacy || protocol < 498) ? "mcp" : "mojmap")
    export("CLIENT") {
        targetNamespaces = [target]
        sourceNamespace = isJarMod ? "official" : "intermediary"
        location = "$projectDir/src/main/resources/mappings-fabric.srg"
        type = "SRG"
    }

    export("COMBINED") {
        targetNamespaces = [target]
        sourceNamespace = isJarMod ? "official" : "intermediary"
        location = "$projectDir/src/main/resources/mappings-fabric.srg"
        type = "SRG"
    }
}
processResources.dependsOn exportMappings

shadowJar {
    mustRunAfter(project(":common").tasks.shadowJar)
    dependsOn(project(":common").tasks.shadowJar)
    from zipTree(project(":common").tasks.shadowJar.archiveFile)
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"

    // Meta Exclusions
    exclude '**/DEPENDENCIES*'
    exclude '**/LICENSE*'
    exclude '**/Log4J*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/versions/**'
    // Package Relocations
    relocate 'com.jagrosh', 'external.com.jagrosh'
    relocate 'org.meteordev', 'external.org.meteordev'
    relocate 'io.github.classgraph', 'external.io.github.classgraph'
    relocate 'nonapi.io.github.classgraph', 'external.nonapi.io.github.classgraph'
    if (protocol < 755) {
        relocate 'org.slf4j', 'external.org.slf4j'
        relocate 'org.apache.logging.slf4j', 'external.org.apache.logging.slf4j'
    }
    // Integration Relocations
    if (!isLegacy) {
        relocate 'me.hypherionmc', 'external.me.hypherionmc'
    }
}

remapJar {
    if (isJarMod) {
        target = "official"
    }
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "fabric"
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}