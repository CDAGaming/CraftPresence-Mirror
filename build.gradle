buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://jitpack.io" }
    }
    dependencies {
        classpath "com.github.wagyourtail:unimined:1c93bedfb9"
    }
}

plugins {
    id 'java'
    id "com.modrinth.minotaur" version "2.4.3"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "org.cadixdev.licenser" version "0.6.1"
}

apply plugin: "xyz.wagyourtail.unimined"

import org.apache.tools.ant.filters.ReplaceTokens

def archive_name = "${mod_name}-${loader_name}"

version = "${versionId}"
group = "com.gitlab.cdagaming"
archivesBaseName = "${archive_name}-${mc_version}-${deploymentType}"

JavaVersion targetVersion = JavaVersion.VERSION_1_8

allprojects {
    sourceCompatibility = targetVersion
    targetCompatibility = targetVersion
}

license {
    // Exclude JUnixSocket Files
    exclude "**/newsclub/**"
    exclude "**/kohlschutter/**"
    exclude "**/maven/com.kohlschutter**"
    exclude "**/jni/**"
    // Exclude Non-Parsable Files
    exclude "**/*.lang"
    exclude "**/*.info"
    exclude "**/*.mcmeta"
    exclude "**/*.properties"
    // Exclude other External Sources
    exclude "**/WinRegistry.java"
    exclude "**/impl/guava/**"
}

curseforge {
    project {
        apiKey = System.getenv("CF_APIKEY")
        id = "297038"
        changelog = file("Changes.md")
        changelogType = "markdown"
        releaseType = "${deploymentType}".toLowerCase()
        addGameVersion "${mc_version}"
        addGameVersion "${loader_name}"

        mainArtifact(jar) {
            displayName = "${archive_name} v${version} ${versionLabel} (${mc_version})"
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${mod_name}".toLowerCase()
    versionNumber = "v${version}_${mc_version}-${loader_name}_${versionLabel}".replaceAll("\\s","").toLowerCase()
    versionName = "${archive_name} v${version} ${versionLabel} (${mc_version})"
    changelog = file("Changes.md").text
    versionType = "${deploymentType}".toLowerCase()
    uploadFile = jar
    gameVersions = ["${mc_version}"]
    loaders = ["${loader_name}".toLowerCase()]
    dependencies = []
}

task publishToModSites {
    publishToModSites.dependsOn 'modrinth'
    publishToModSites.dependsOn 'curseforge'
}

unimined {
    // debug, puts some things in build/unimined instead of ~/.gradle/caches/unimined
    // I recommend you leave this off until unimined is stable
    useGlobalCache = true
}

minecraft {
    // current available options are: forge, jarMod, fabric
    // if you don't include this, it will default to no mod loader transforms
    forge {
        // required for 1.7+
        it.mcpVersion = "${mc_mappings}"
        it.mcpChannel = 'stable'
    }
    // required when using mcp mappings
    mcRemapper.fallbackTarget = "searge"

    mcRemapper.tinyRemapperConf = {
        // most mcp mappings (except older format) dont include field desc
        it.ignoreFieldDesc(true)
        // this also fixes some issues with them, as it tells tiny remapper to try harder to resolve conflicts
        it.ignoreConflicts(true)
    }
}

mappings {
    // ability to add custom mappings
    // available targets are "CLIENT", "SERVER", "COMBINED"
    getStub("CLIENT").withMappings(["searge", "named"]) {
      c("ModLoader", "ModLoader", "modloader/ModLoader")
      c("BaseMod", "BaseMod", "modloader/BaseMod")
    }
}

sourceSets {
    // enable the client configuration when not using combined (or mc <= 1.2.5)
    client
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "net.minecraft:minecraft:${mc_version}"

    forge "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
}

jar {
    from sourceSets.main.output
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = 'UTF-8'

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = Integer.parseInt(targetVersion.getMajorVersion())
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", "${mc_version}"

    // replace stuff in mcmod.info, nothing else
    filesMatching("mcmod.info") {
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': "${mc_version}"
    }
}

def copyDir = "$compileJava.temporaryDir/replaced"
task processSource(type: Sync) {
    // This will ensure that this task is redone when the properties change.
    inputs.property "modName", "${mod_name}"
    inputs.property "versionId", "${versionId}"
    inputs.property "versionType", "${deploymentType}"
    inputs.property "versionLabel", "${versionLabel}"

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [
            MOD_NAME     : mod_name,
            VERSION_ID   : versionId,
            VERSION_TYPE : deploymentType,
            VERSION_LABEL: versionLabel
    ])
    into copyDir
}

compileJava {
    source = processSource.outputs
}
