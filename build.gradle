buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://gitlab.com/EMC-Framework/maven/raw/master/" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:3.+"
        classpath "com.github.CDAGaming:CurseGradle:master-SNAPSHOT"
        classpath "gradle.plugin.net.minecrell:licenser:0.4.1"
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "net.minecrell.licenser"

import net.minecraftforge.gradle.common.task.SignJar
import org.apache.tools.ant.filters.ReplaceTokens

version = "${versionId}"
group = "com.gitlab.cdagaming"
archivesBaseName = "${archive_name}-${mc_version}-${versionType}"

allprojects {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

license {
    // Exclude JUnixSocket Files
    exclude "**/newsclub/**"
    exclude "**/maven/com.kohlschutter.junixsocket/**"
    exclude "**/jni/**"
    // Exclude Non-Parsable Files
    exclude "**/*.lang"
    exclude "**/*.info"
    exclude "**/*.mcmeta"
    exclude "**/*.properties"
}

curseforge {
    project {
        apiKey = System.getenv("CF_APIKEY")
        id = "297038"
        changelog = file("Changes.md")
        changelogType = "markdown"
        releaseType = "${versionType}".toLowerCase()
        addGameVersion "${mc_version}"
        addGameVersion "Forge"

        mainArtifact(jar) {
            displayName = "${archive_name} v${version} ${versionLabel} (${mc_version})"
        }
    }
}

minecraft {
    mappings channel: 'snapshot', version: "${mc_mappings}"

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                craftpresence {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                craftpresence {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
}

jar {
    from sourceSets.main.output
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", "${mc_version}"

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': "${mc_version}"
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        System.getenv("key_MAINPASS") != null
    }

    keyStore = "keystore.jks"
    alias = System.getenv("key_Alias")
    storePass = System.getenv("key_MAINPASS")
    keyPass = System.getenv("keyPass")

    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

def copyDir = "$compileJava.temporaryDir/replaced"
task processSource(type: Sync) {
    // This will ensure that this task is redone when the properties change.
    inputs.property "modName", "${mod_name}"
    inputs.property "versionId", "${versionId}"
    inputs.property "fingerprint", "${certFingerprint}"
    inputs.property "versionType", "${versionType}"
    inputs.property "versionLabel", "${versionLabel}"

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [
            MOD_NAME        : mod_name,
            VERSION_ID      : versionId,
            FINGERPRINT     : certFingerprint,
            VERSION_TYPE    : versionType,
            VERSION_LABEL   : versionLabel
    ])
    into copyDir
}

compileJava {
    source = processSource.outputs
}

tasks.build.dependsOn signJar
tasks.curseforge.dependsOn build
