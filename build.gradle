plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '0.12.0-SNAPSHOT' apply false
    id "io.github.pacifistmc.forgix" version "1.2.6"
}

architectury {
    minecraft = rootProject.mc_version
}

def ext_versionInfoLabel = "${rootProject.deploymentType.equalsIgnoreCase("release") ? "" : "-${rootProject.versionLabel}"}"
def ext_baseVersionLabel = "${rootProject.versionId + ext_versionInfoLabel.replaceAll("\\s", ".")}".toLowerCase()
def ext_classPath = "${rootProject.group}".replace(".", "/") + "/${mod_name}".toLowerCase()

def ext_versionFormat = "${ext_baseVersionLabel + "+" + mc_version}"
def ext_fileFormat = "${rootProject.mod_name}-${ext_versionFormat}"

subprojects {
    apply plugin: 'java'
    apply plugin: 'dev.architectury.loom'

    ext {
        versionInfoLabel = "${ext_versionInfoLabel}"
        baseVersionLabel = "${ext_baseVersionLabel}"
        classPath = "${ext_classPath}"
        versionFormat = "${ext_versionFormat}"
        fileFormat = "${ext_fileFormat}"
    }

    version = "${versionFormat}"
    group = rootProject.group
    archivesBaseName = "${mod_name}"

    JavaVersion targetVersion = JavaVersion.VERSION_17


    sourceCompatibility = targetVersion
    targetCompatibility = targetVersion

    loom {
        silentMojangMappingsLicense()
    }

    java {
        withSourcesJar()
    }

    repositories {
        flatDir {
            dirs "$rootDir/libs"
        }
        mavenCentral()
        maven { url "https://maven.firstdarkdev.xyz/releases" }
        maven { url "https://maven.firstdarkdev.xyz/snapshots" }
        maven {
            name = 'TerraformersMC'
            url = 'https://maven.terraformersmc.com/releases/'
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.mc_version}"
        mappings loom.officialMojangMappings()
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        if (targetVersion.isJava9Compatible()) {
            options.release = Integer.parseInt(targetVersion.getMajorVersion())
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(Javadoc) {
            exclude "${classPath}/config/category/**"
            exclude "${classPath}/config/element/**"
            exclude "${classPath}/config/gui/**"
            exclude "${classPath}/integrations/**"
        }
    }
}

forgix {
    group = rootProject.group
    mergedJarName = "${ext_fileFormat}-universal.jar"
    outputDir = "build/libs"

    forge {
        jarLocation = "build/libs/${ext_fileFormat}-forge.jar"
    }

    fabric {
        jarLocation = "build/libs/${ext_fileFormat}-fabric.jar"
    }
}

allprojects {
    apply plugin: "architectury-plugin"
}
