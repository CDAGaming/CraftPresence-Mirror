plugins {
    id 'java'
    id 'xyz.wagyourtail.unimined' version '0.1.5-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.4.3"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "org.cadixdev.licenser" version "0.6.1"
}


import groovy.io.FileType
import org.apache.tools.ant.filters.ReplaceTokens

import java.util.regex.Pattern

def archive_name = "${mod_name}-${loader_name}"
def generatedResources = "$buildDir/generated-resources"

sourceSets {
    main {
        output.dir(generatedResources, builtBy: 'generateMyResources')
    }
}

version = "${versionId}"
group = "com.gitlab.cdagaming"
archivesBaseName = "${archive_name}-${mc_version}-${deploymentType}"

JavaVersion targetVersion = JavaVersion.VERSION_1_8

allprojects {
    sourceCompatibility = targetVersion
    targetCompatibility = targetVersion
}

license {
    // Exclude JUnixSocket Files
    exclude "**/newsclub/**"
    exclude "**/kohlschutter/**"
    exclude "**/maven/com.kohlschutter**"
    exclude "**/jni/**"
    // Exclude Non-Parsable Files
    exclude "**/*.lang"
    exclude "**/*.info"
    exclude "**/*.mcmeta"
    exclude "**/*.properties"
    // Exclude other External Sources
    exclude "**/WinRegistry.java"
    exclude "**/impl/guava/**"
}

// CurseForge Compatibility Layer (For Modloader and Beta MC)
// (This can be removed when/if CurseForge ever adds support for this)
def cf_loader = "${loader_name}"
def cf_version = "${mc_version}"
if ("${isLegacy}".toBoolean()) {
    int protocol = "${mc_protocol}".toInteger()
    if ((protocol == 22 || protocol == 23) && cf_loader == "${"ModLoader"}") { // MC 1.0.0 and 1.1.0
        cf_loader = "Forge"
    } else if (protocol < 22) {
        cf_loader = ""
        cf_version = "1.0"
    }
}

curseforge {
    project {
        apiKey = System.getenv("CF_APIKEY")
        id = "297038"
        changelog = file("Changes.md")
        changelogType = "markdown"
        releaseType = "${deploymentType}".toLowerCase()
        if (!cf_version.isEmpty()) {
            addGameVersion cf_version
        }
        if (!cf_loader.isEmpty()) {
            addGameVersion cf_loader
        }

        mainArtifact(remapJar) {
            displayName = "${archive_name} v${version} ${versionLabel} (${mc_version})"
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${mod_name}".toLowerCase()
    versionNumber = "v${version}_${mc_version}-${loader_name}_${versionLabel}".replaceAll("\\s", "").toLowerCase()
    versionName = "${archive_name} v${version} ${versionLabel} (${mc_version})"
    changelog = file("Changes.md").text
    versionType = "${deploymentType}".toLowerCase()
    uploadFile = remapJar
    gameVersions = ["${mc_version}"]
    loaders = ["${loader_name}".toLowerCase()]
    dependencies = []
}

task publishToModSites {
    publishToModSites.dependsOn 'modrinth'
    publishToModSites.dependsOn 'curseforge'
}

unimined {
    // debug, puts some things in build/unimined instead of ~/.gradle/caches/unimined
    // I recommend you leave this off until unimined is stable
    useGlobalCache = true
}

minecraft {
    // current available options are: forge, jarMod, fabric
    // if you don't include this, it will default to no mod loader transforms
    switch ("${loader_name}".toLowerCase()) {
        case "forge":
            forge {
                // required for 1.7+
                it.mcpVersion = "${mc_mappings}"
                it.mcpChannel = 'stable'
            }
            break
        case "fabric":
            break
        default:
            jarMod()
            break
    }
    // required when using mcp mappings
    if ("${isLegacy}".toBoolean()) {
        int protocol = "${mc_protocol}".toInteger()
        if (protocol <= 2) { // MC a1.1.2_01 and below
            targetNamespace = "searge"
        } else {
            mcRemapper.fallbackTarget = "searge"
        }
    } else {
        mcRemapper.fallbackTarget = "searge"
    }

    mcRemapper.tinyRemapperConf = {
        // most mcp mappings (except older format) dont include field desc
        it.ignoreFieldDesc(true)
        // this also fixes some issues with them, as it tells tiny remapper to try harder to resolve conflicts
        it.ignoreConflicts(true)
    }
}

mappings {
    // ability to add custom mappings
    // available targets are "CLIENT", "SERVER", "COMBINED"
    getStub("COMBINED").withMappings(["searge", "named"]) {
        c("ModLoader", "net/minecraft/src/ModLoader", "net/minecraft/src/ModLoader")
        c("BaseMod", "net/minecraft/src/BaseMod", "net/minecraft/src/BaseMod")
        c("mod_${mod_name}", "${group}".replace(".", "/") + "/${mod_name}".toLowerCase() + "/mod_${mod_name}", "${group}".replace(".", "/") + "/${mod_name}".toLowerCase() + "/mod_${mod_name}")
    }
    getStub("CLIENT").withMappings(["searge", "named"]) {
        c("ModLoader", "net/minecraft/src/ModLoader", "net/minecraft/src/ModLoader")
        c("BaseMod", "net/minecraft/src/BaseMod", "net/minecraft/src/BaseMod")
        c("mod_${mod_name}", "${group}".replace(".", "/") + "/${mod_name}".toLowerCase() + "/mod_${mod_name}", "${group}".replace(".", "/") + "/${mod_name}".toLowerCase() + "/mod_${mod_name}")
    }

    addExport("CLIENT") {
        it.targetNamespace = ["searge"]
        it.sourceNamespace = "official"
        it.location = file("$rootDir/src/main/resources/mappings.srg")
        it.setType "srg"
    }

    addExport("COMBINED") {
        it.targetNamespace = ["searge"]
        it.sourceNamespace = "official"
        it.location = file("$rootDir/src/main/resources/mappings.srg")
        it.setType "srg"
    }
}

sourceSets {
    // enable the client configuration when not using combined (or mc <= 1.2.5)
    client
}


configurations {
    shadow
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft "net.minecraft:minecraft:${mc_version}"

    switch ("${loader_name}".toLowerCase()) {
        case "forge":
            forge "net.minecraftforge:forge:${mc_version}-${loader_version}"
            break
        case "fabric":
            break
        default:
            jarMod "local_mod:ModLoader:${loader_version}@zip"
            mappings "local_mod:mcp:${mc_mappings}@zip"
            break
    }

    // Legacy Dependencies, based on Protocol Version
    if ("${isLegacy}".toBoolean()) {
        int protocol = "${mc_protocol}".toInteger()
        if (protocol <= 78) { // MC 1.6.4 and below
            shadow(implementation('commons-codec:commons-codec:1.15'))
        }
        if (protocol <= 61) { // MC 1.5.2 and below
            shadow(implementation('org.apache.commons:commons-lang3:3.8.1'))
            shadow(implementation('commons-io:commons-io:2.5'))
            shadow(implementation('com.google.code.gson:gson:2.8.0'))
        }
        if (protocol <= 51) { // MC 1.4.7 and below
            shadow(implementation('com.google.guava:guava:14.0-rc3'))
        }
    }

    // Java-Specific Dependencies
    if (targetVersion.isJava8Compatible()) {
        shadow(implementation('com.kohlschutter.junixsocket:junixsocket-common:2.5.1'))
        shadow(implementation('com.kohlschutter.junixsocket:junixsocket-native-common:2.5.1'))
    } else {
        shadow(implementation('com.kohlschutter.junixsocket:junixsocket-common:2.4.0'))
        shadow(implementation('com.kohlschutter.junixsocket:junixsocket-native-common:2.4.0'))
    }
    implementation "com.google.code.findbugs:jsr305:3.0.2"
}

jar {
    from sourceSets.main.output
}

remapJar {
    int forgeGradleVer = "${forgeGradleLevel}".toInteger()
    if (forgeGradleVer >= 2) {
        targetNamespace = "searge"
    } else {
        targetNamespace = "official"
    }
    if ("${isLegacy}".toBoolean()) {
        int protocol = "${mc_protocol}".toInteger()
        if (protocol <= 2) { // MC a1.1.2_01 and below
            sourceNamespace = "searge"
        } else {
            fallbackFromNamespace = "searge"
        }
    } else {
        fallbackFromNamespace = "searge"
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(configurations.shadow.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/versions/**'
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = 'UTF-8'

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    if (targetVersion.isJava9Compatible()) {
        it.options.release = Integer.parseInt(targetVersion.getMajorVersion())
    }
}

task generateMyResources {
    doFirst {
        def langDir = new File(sourceSets.main.output.resourcesDir, "/assets/$rootProject.name/lang")
        def resultDir = new File(generatedResources, "/assets/$rootProject.name/lang")
        langDir.mkdirs()
        resultDir.mkdirs()
        langDir.eachFileRecurse(FileType.FILES) { file ->
            if (file.path.endsWith(".json")) {
                def contents = "#PARSE_ESCAPES\n"
                System.out.println("Converting json to lang: " + file.path)
                // Logic from TranslationUtils#getTranslationMap
                // Does not include the escape replacements, as those are done later
                for (currentString in file.text.readLines()) {
                    currentString = currentString.trim()
                    if (!currentString.startsWith("#") && !currentString.startsWith("[{}]") && currentString.contains(":")) {
                        final String[] splitTranslation = currentString.split(":", 2)
                        String str1 = splitTranslation[0].substring(1, splitTranslation[0].length() - 1).trim()
                        String str2 = splitTranslation[1].substring(2, splitTranslation[1].length() - 2).trim()
                        contents += "${str1}=${str2}\n"
                    }
                }
                def resultName = file.name.replace(".json", ".lang")
                if ("${isLegacy}".toBoolean() || "${mc_protocol}".toInteger() <= 210) {
                    // On 1.10.2 (Pack Format 2 or below) or Legacy MC
                    // Adjust name format from xx_xx to xx_XX
                    resultName = Pattern.compile("_.+?\\.").matcher(s).replaceAll(m -> m.group().toUpperCase())
                }
                def resultFile = new File(resultDir, resultName)
                resultFile.createNewFile()
                System.out.println("Outputting to: " + resultFile.path)
                resultFile.text = contents.replaceAll("\\\\\\\\", "\\\\")
            }
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version.toString()
    inputs.property "mcversion", "${mc_version}"

    // replace stuff in mcmod.info, nothing else
    filesMatching("mcmod.info") {
        // replace version and mcversion
        expand 'version': project.version.toString(),
                'mcversion': "${mc_version}"
    }

    // replace stuff in mods.toml, nothing else
    filesMatching("META-INF/mods.toml") {
        // replace version and mcversion
        expand 'version': project.version.toString(),
                'mcversion': "${mc_version}"
    }

    // replace stuff in mods.toml, nothing else
    filesMatching("fabric.mod.json") {
        // replace version and mcversion
        expand 'version': project.version.toString(),
                'mcversion': "${mc_version}"
    }

    // replace stuff in mod_modId.info, nothing else
    filesMatching("mod_${mod_name}.info") {
        // replace version
        expand 'version': project.version.toString()
    }

    filesMatching("mappings.srg") {
        filter { line ->
            if (line.startsWith("CL:")) {
                line
            } else {
                null
            }
        }
    }
}

def copyDir = "$compileJava.temporaryDir/replaced"
task processSource(type: Sync) {
    // This will ensure that this task is redone when the properties change.
    inputs.property "modName", "${mod_name}"
    inputs.property "versionId", "${versionId}"
    inputs.property "versionType", "${deploymentType}"
    inputs.property "versionLabel", "${versionLabel}"
    inputs.property "mcVersion", "${mc_version}"
    inputs.property "mcProtocol", "${mc_protocol}"

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [
            MOD_NAME     : mod_name,
            VERSION_ID   : versionId,
            VERSION_TYPE : deploymentType,
            VERSION_LABEL: versionLabel,
            MC_VERSION   : mc_version,
            MC_PROTOCOL  : mc_protocol
    ])
    into copyDir
}

compileJava {
    source = processSource.outputs
}
