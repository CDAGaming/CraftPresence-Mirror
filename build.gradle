import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'xyz.wagyourtail.unimined' version '0.2.0-SNAPSHOT' apply false
    id "io.github.pacifistmc.forgix" version "1.2.6"
}

def ext_versionInfoLabel = "${rootProject.deploymentType.equalsIgnoreCase("release") ? "" : "-${rootProject.versionLabel}"}"
def ext_baseVersionLabel = "${rootProject.versionId + ext_versionInfoLabel.replaceAll("\\s", ".")}".toLowerCase()
def ext_classPath = "${rootProject.group}".replace(".", "/") + "/${mod_name}".toLowerCase()

def ext_versionFormat = "${ext_baseVersionLabel + "+" + mc_version}"
def ext_fileFormat = "${rootProject.mod_name}-${ext_versionFormat}"

int ext_protocol = "${mc_protocol}".toInteger()
boolean ext_isLegacy = "${isLegacy}".toBoolean()
boolean ext_isJarMod = "${isJarMod}".toBoolean()

subprojects {
    apply plugin: 'java'
    apply plugin: 'xyz.wagyourtail.unimined'

    ext {
        versionInfoLabel = "${ext_versionInfoLabel}"
        baseVersionLabel = "${ext_baseVersionLabel}"
        classPath = "${ext_classPath}"
        versionFormat = "${ext_versionFormat}"
        fileFormat = "${ext_fileFormat}"
        protocol = ext_protocol
        isLegacy = ext_isLegacy
        isJarMod = ext_isJarMod
    }

    version = "${versionFormat}"
    group = rootProject.group
    archivesBaseName = "${mod_name}"

    JavaVersion targetVersion = JavaVersion.VERSION_1_8

    sourceCompatibility = targetVersion
    targetCompatibility = targetVersion

    java {
        withSourcesJar()
    }

    unimined {
        // debug, puts some things in build/unimined instead of ~/.gradle/caches/unimined
        // I recommend you leave this off until unimined is stable
        useGlobalCache = false
    }

    mappings {
        // ability to add custom mappings
        // available targets are "CLIENT", "SERVER", "COMBINED"
        getStub("COMBINED").withMappings(["searge", "named"]) {
            c("ModLoader", "net/minecraft/src/ModLoader", "net/minecraft/src/ModLoader")
            c("BaseMod", "net/minecraft/src/BaseMod", "net/minecraft/src/BaseMod")
            c("mod_${mod_name}", classPath + "/mod_${mod_name}", classPath + "/mod_${mod_name}")
        }
        getStub("CLIENT").withMappings(["searge", "named"]) {
            c("ModLoader", "net/minecraft/src/ModLoader", "net/minecraft/src/ModLoader")
            c("BaseMod", "net/minecraft/src/BaseMod", "net/minecraft/src/BaseMod")
            c("mod_${mod_name}", classPath + "/mod_${mod_name}", classPath + "/mod_${mod_name}")
        }
    }

    repositories {
        flatDir {
            dirs "$rootDir/libs"
        }
        mavenCentral()
        maven {
            name = "Forge"
            url = "https://maven.minecraftforge.net/"
            metadataSources {
                artifact()
            }
        }
        maven {
            name = 'Fabric'
            url = "https://maven.fabricmc.net/"
        }
//        maven {
//            name = "Legacy Fabric"
//            url = "https://maven.legacyfabric.net/"
//        }
        maven { url "https://maven.firstdarkdev.xyz/releases" }
        maven { url "https://maven.firstdarkdev.xyz/snapshots" }
        maven {
            name = 'TerraformersMC'
            url = 'https://maven.terraformersmc.com/releases/'
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:${rootProject.mc_version}"
        // If a Legacy Build or below 1.14.4, use MCP Data; otherwise use mojmaps
        if (isLegacy || protocol < 498) {
            if (isJarMod) {
                mappings "local_mod:mcp:${mc_mappings}@zip"
            } else {
                if (!isLegacy && protocol >= 340) {
                    mappings "de.oceanlabs.mcp:mcp_config:${rootProject.mc_version}@zip"
                } else {
                    mappings "de.oceanlabs.mcp:mcp:${rootProject.mc_version}:srg@zip"
                }
                mappings "de.oceanlabs.mcp:mcp_stable:${rootProject.mc_mappings}@zip"
            }
        } else {
            mappings "net.minecraft:minecraft:${rootProject.mc_version}:client-mappings"
        }

        // Only use Intermediaries on Versions that support it
        if ((isLegacy && protocol >= 39) || !isLegacy) {
            mappings "${rootProject.fabric_group}:intermediary:${rootProject.mc_version}:v2"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        if (targetVersion.isJava9Compatible()) {
            options.release = Integer.parseInt(targetVersion.getMajorVersion())
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(Javadoc) {
            exclude "${classPath}/config/category/**"
            exclude "${classPath}/config/element/**"
            exclude "${classPath}/config/gui/**"
            exclude "${classPath}/integrations/**"
        }
    }

    def copyDir = "$compileJava.temporaryDir/replaced"
    task processSource(type: Sync) {
        // This will ensure that this task is redone when the properties change.
        inputs.property "modName", "${mod_name}"
        inputs.property "versionId", "${versionId}"
        inputs.property "versionType", "${deploymentType}"
        inputs.property "versionLabel", "${versionLabel}"
        inputs.property "mcVersion", "${mc_version}"
        inputs.property "mcProtocol", "${mc_protocol}"

        from sourceSets.main.java
        filter(ReplaceTokens, tokens: [
                MOD_NAME    : mod_name,
                VERSION_ID  : "${baseVersionLabel}".toString(),
                VERSION_TYPE: deploymentType,
                MC_VERSION  : mc_version,
                MC_PROTOCOL : mc_protocol
        ])
        into copyDir
    }

    compileJava {
        source = processSource.outputs
    }
}

forgix {
    group = rootProject.group
    mergedJarName = "${ext_fileFormat}-universal.jar"
    outputDir = "build/libs"

    forge {
        jarLocation = "build/libs/${ext_fileFormat}-forge.jar"
    }

    fabric {
        jarLocation = "build/libs/${ext_fileFormat}-fabric.jar"
    }
}
