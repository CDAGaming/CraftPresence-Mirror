plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    if (isJarMod) {
        jarMod "risugami:modloader:${rootProject.forge_version}"
    }

    common project(path: ':common'), { transitive false }
    common(project(path: ":common", configuration: "shade"))
    common project(path: ":common", configuration: "runtime")
    shadowCommon project(path: ":common", configuration: "shadeOnly")
    shadowCommon project(path: ':common'), { transitive false }
}

def resourceTargets = [
        "mcmod.info", "META-INF/mods.toml", "mod_${mod_name}.info".toString()
]
def replaceProperties = [
        version: baseVersionLabel.toString(), mcversion: mcVersionLabel.toString()
]

processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    filesMatching("mappings-${fmlName}.srg") {
        filter { line ->
            if (line.startsWith("CL:")) {
                line
            } else {
                null
            }
        }
    }
}

exportMappings {
    export {
        targetNamespaces = [mc_mappings_type == "retroMCP" ? "mcp" : "searge"]
        sourceNamespace = "official"
        location = "$projectDir/src/main/resources/mappings-${fmlName}.srg"
        type = "SRG"
    }
}
processResources.dependsOn exportMappings

shadowJar {
    mustRunAfter(project(":common").tasks.shadowJar)
    dependsOn(project(":common").tasks.shadowJar)
    from zipTree(project(":common").tasks.shadowJar.archiveFile)
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"

    // Meta Exclusions
    exclude '**/DEPENDENCIES*'
    exclude '**/LICENSE*'
    exclude '**/Log4J*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/versions/**'
    // Package Relocations
    relocate 'com.jagrosh', 'external.com.jagrosh'
    relocate 'org.meteordev', 'external.org.meteordev'
    relocate 'io.github.classgraph', 'external.io.github.classgraph'
    relocate 'nonapi.io.github.classgraph', 'external.nonapi.io.github.classgraph'
    if (protocol < 755) {
        relocate 'org.slf4j', 'external.org.slf4j'
        relocate 'org.apache.logging.slf4j', 'external.org.apache.logging.slf4j'
    }
    // Integration Relocations
    if (!isLegacy) {
        relocate 'me.hypherionmc', 'external.me.hypherionmc'
    }
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "${fmlName}"
}

jar {
    if (canUseATs) {
        manifest {
            attributes 'FMLAT': 'accesstransformer.cfg'
        }
    }
    archiveClassifier.set "dev"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}