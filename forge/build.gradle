plugins {
    id "com.github.johnrengelman.shadow" version "8.1.0"
}

// Only apply ATs to forge on non-legacy builds, or on Legacy Protocols above 1.5
// due to the way Forge requires core-mods for lower version usage
def canUseATs = false
def accessWidenerFile = null
if (!isJarMod) {
    accessWidenerFile = project(":common").minecraft.mcPatcher.accessWidener
    canUseATs = accessWidenerFile != null && (!isLegacy || protocol > 60)
}

// Note: Required for proper mixin remaps
mods {
    modRemapper.setRemapMixins("TINY_HARD")
}

minecraft {
    if (isJarMod) {
        jarMod {
            // required when using mcp mappings
            if (protocol <= 2) { // MC a1.1.2_01 and below
                devNamespace = "searge"
            } else {
                devFallbackNamespace = "searge"
            }
        }
    } else {
        forge {
            if (canUseATs) {
                accessTransformer = aw2at(accessWidenerFile)
            }
        }
    }

    runs.client = {
        if (use_replay_mod.toBoolean()) {
            jvmArgs.addAll(["-Dfml.coreMods.load=com.replaymod.core.LoadingPlugin", "-Dmixin.env.remapRefMap=true"])
        }
    }
}

mappings {
    // ability to add custom mappings
    // available targets are "CLIENT", "SERVER", "COMBINED"
    def target = (isLegacy || protocol < 498) ? "mcp" : "mojmap"
    getStub("COMBINED").withMappings(["searge", target]) {
        c("ModLoader", "net/minecraft/src/ModLoader", "net/minecraft/src/ModLoader")
        c("BaseMod", "net/minecraft/src/BaseMod", "net/minecraft/src/BaseMod")
        c("mod_${mod_name}", classPath + "/forge/mod_${mod_name}", classPath + "/forge/mod_${mod_name}")
    }
    getStub("CLIENT").withMappings(["searge", target]) {
        c("ModLoader", "net/minecraft/src/ModLoader", "net/minecraft/src/ModLoader")
        c("BaseMod", "net/minecraft/src/BaseMod", "net/minecraft/src/BaseMod")
        c("mod_${mod_name}", classPath + "/forge/mod_${mod_name}", classPath + "/forge/mod_${mod_name}")
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    if (isJarMod) {
        jarMod "risugami:modloader:${rootProject.forge_version}"
    } else {
        forge "net.minecraftforge:forge:${rootProject.mc_version}-${rootProject.forge_version}"
    }

    common project(path: ':common'), { transitive false }
    common(project(path: ":common", configuration: "shade"))
    common project(path: ":common", configuration: "runtime")
    shadowCommon project(path: ":common", configuration: "shadeOnly")
    shadowCommon project(path: ':common'), { transitive false }

    // Additional Integrations
    if (use_replay_mod.toBoolean()) {
        modImplementation("com.replaymod:replaymod-${rootProject.mc_version}:${rootProject.replaymod_ver}")
    }
}

processResources {
    inputs.property "version", "${baseVersionLabel}"
    inputs.property "mcversion", "${rootProject.mc_version}"

    // replace stuff in mcmod.info, nothing else
    filesMatching("mcmod.info") {
        // replace version and mcversion
        expand 'version': "${baseVersionLabel}",
                'mcversion': "${mc_version}"
    }

    // replace stuff in mods.toml, nothing else
    filesMatching("META-INF/mods.toml") {
        expand "version": "${baseVersionLabel}",
                "mcversion": "${rootProject.mc_version}"
    }

    // replace stuff in mod_modId.info, nothing else
    filesMatching("mod_${mod_name}.info") {
        // replace version
        expand 'version': "${baseVersionLabel}"
    }

    filesMatching("mappings-forge.srg") {
        filter { line ->
            if (line.startsWith("CL:")) {
                line
            } else {
                null
            }
        }
    }
}

exportMappings {
    export("CLIENT") {
        targetNamespaces = ["searge"]
        sourceNamespace = "official"
        location = "$projectDir/src/main/resources/mappings-forge.srg"
        type = "SRG"
    }

    export("COMBINED") {
        targetNamespaces = ["searge"]
        sourceNamespace = "official"
        location = "$projectDir/src/main/resources/mappings-forge.srg"
        type = "SRG"
    }
}
processResources.dependsOn exportMappings

shadowJar {
    mustRunAfter(project(":common").tasks.shadowJar)
    dependsOn(project(":common").tasks.shadowJar)
    from zipTree(project(":common").tasks.shadowJar.archiveFile)
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"

    // Meta Exclusions
    exclude '**/DEPENDENCIES*'
    exclude '**/LICENSE*'
    exclude '**/Log4J*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/versions/**'
    // Package Relocations
    relocate 'com.jagrosh', 'external.com.jagrosh'
    relocate 'org.meteordev', 'external.org.meteordev'
    relocate 'io.github.classgraph', 'external.io.github.classgraph'
    relocate 'nonapi.io.github.classgraph', 'external.nonapi.io.github.classgraph'
    if (protocol < 755) {
        relocate 'org.slf4j', 'external.org.slf4j'
        relocate 'org.apache.logging.slf4j', 'external.org.apache.logging.slf4j'
    }
    // Integration Relocations
    if (!isLegacy) {
        relocate 'me.hypherionmc', 'external.me.hypherionmc'
    }
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "forge"
}

jar {
    if (canUseATs) {
        manifest {
            attributes 'FMLAT': 'accesstransformer.cfg'
        }
    }
    archiveClassifier.set "dev"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}